Index: lucene/common-build.xml
===================================================================
--- lucene/common-build.xml	(revision 1798103)
+++ lucene/common-build.xml	(working copy)
@@ -507,7 +507,7 @@
     <attribute name="manifest.file" default="${manifest.file}"/>
     <sequential>
       <!-- If possible, include the svnversion -->
-      <exec dir="." executable="${svnversion.exe}" outputproperty="svnversion" failifexecutionfails="false"/>
+      <!-- exec dir="." executable="${svnversion.exe}" outputproperty="svnversion" failifexecutionfails="false"/ -->
 
       <manifest file="@{manifest.file}">
         <!--
@@ -1226,6 +1226,10 @@
     <!-- convenience target to package core JAR -->
   </target>
 
+  <target name="jar-test" depends="compile-test">
+    <jar destfile="${build.dir}/${final.name}-test.jar" basedir="${build.dir}/classes/test" excludes="**/*.java"/>
+  </target>
+
   <target name="jar-src">
     <sequential>
       <mkdir dir="${build.dir}" />
Index: solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java
===================================================================
--- solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java	(revision 1798103)
+++ solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java	(working copy)
@@ -186,7 +186,15 @@
           // TODO : shouldn't have to keep reading the config name when it has been read before
           exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);
         } else {
-          File fC = new File(core.getResourceLoader().getConfigDir(), f);
+          try {
+            Config cfg = new Config( core.getResourceLoader(), f );
+            elevationCache.put(null, loadElevationMap( cfg ));
+          } catch (Exception e) {
+            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,
+               "QueryElevationComponent missing config file: '"+f + "\n"
+               + e.getMessage() );
+          }
+          /*File fC = new File( core.getResourceLoader().getConfigDir(), f );
           File fD = new File(core.getDataDir(), f);
           if (fC.exists() == fD.exists()) {
             throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
@@ -198,7 +206,7 @@
             log.info("Loading QueryElevation from: " + fC.getAbsolutePath());
             Config cfg = new Config(core.getResourceLoader(), f);
             elevationCache.put(null, loadElevationMap(cfg));
-          }
+          }*/
         }
         //in other words, we think this is in the data dir, not the conf dir
         if (!exists) {
Index: solr/core/src/java/org/apache/solr/request/ServletSolrParams.java
===================================================================
--- solr/core/src/java/org/apache/solr/request/ServletSolrParams.java	(revision 1798103)
+++ solr/core/src/java/org/apache/solr/request/ServletSolrParams.java	(working copy)
@@ -21,12 +21,24 @@
 
 import org.apache.solr.common.params.MultiMapSolrParams;
 
+import java.util.Enumeration;
+import java.util.HashMap;
+
+import java.util.Map;
+
 /**
  *
  */
 public class ServletSolrParams extends MultiMapSolrParams {
   public ServletSolrParams(ServletRequest req) {
-    super(req.getParameterMap());
+    //super(req.getParameterMap());
+    super(new HashMap<String,String[]>());
+    Enumeration parmsNames = req.getParameterNames();
+    Map<String,String[]> pars = this.getMap();
+    while (parmsNames.hasMoreElements()) {
+      String parName = (String)parmsNames.nextElement();
+      pars.put(parName, req.getParameterValues(parName));
+    }
   }
 
   @Override
Index: solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java
===================================================================
--- solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java	(revision 1798103)
+++ solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java	(working copy)
@@ -32,7 +32,11 @@
 import org.apache.solr.common.SolrInputField;
 import org.apache.solr.common.cloud.Slice;
 import org.apache.solr.common.params.SolrParams;
-import org.apache.solr.common.util.*;
+import org.apache.solr.common.util.Base64;
+import org.apache.solr.common.util.ContentStream;
+import org.apache.solr.common.util.ContentStreamBase;
+import org.apache.solr.common.util.DateUtil;
+import org.apache.solr.common.util.XML;
 
 
 /**
